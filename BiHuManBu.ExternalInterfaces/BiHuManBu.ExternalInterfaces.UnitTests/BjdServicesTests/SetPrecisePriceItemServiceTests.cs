using System.Collections.Generic;
using System.Linq;
using BiHuManBu.ExternalInterfaces.Infrastructure.Caches;
using BiHuManBu.ExternalInterfaces.Models;
using BiHuManBu.ExternalInterfaces.Services;
using BiHuManBu.ExternalInterfaces.Services.AgentChannelService.Implementations;
using BiHuManBu.ExternalInterfaces.Services.Messages.Response;
using NSubstitute;
using NUnit.Framework;
using BiHuManBu.ExternalInterfaces.Services.ValidateService.Interfaces;
using BiHuManBu.ExternalInterfaces.Services.Messages.Request;
using System.Net;
using BiHuManBu.ExternalInterfaces.Services.BjdServices.Achieves;
using BiHuManBu.ExternalInterfaces.Infrastructure.Helpers;
using BiHuManBu.ExternalInterfaces.Services.ViewModels;
using System;
using BiHuManBu.ExternalInterfaces.Models.ReportModel;
using BiHuManBu.ExternalInterfaces.Models.IRepository;
using BiHuManBu.ExternalInterfaces.Services.BjdServices.Extends;
using System.Linq.Expressions;
using BiHuManBu.ExternalInterfaces.Services.Mapper;
using BiHuManBu.ExternalInterfaces.Services.BjdServices.Interfaces;

namespace BiHuManBu.ExternalInterfaces.UnitTests.BjdServicesTests
{
    [TestFixture]
    public class SetPrecisePriceItemServiceTests
    {
        private static IAgentConfigRepository _agentConfigRepository = Substitute.For<IAgentConfigRepository>();
        private static IQuoteResultRepository _quoteResultRepository = Substitute.For<IQuoteResultRepository>();
        private static IPictureRepository _pictureRepository = Substitute.For<IPictureRepository>();
        private static ISaveQuoteRepository _saveQuoteRepository = Substitute.For<ISaveQuoteRepository>();
        private static ISetPrecisePriceItem _setPrecisePriceItem = Substitute.For<ISetPrecisePriceItem>();
        private static ISubmitInfoRepository _submitInfoRepository = Substitute.For<ISubmitInfoRepository>();
        private static IHebaoDianweiRepository _hebaoDianweiRepository = Substitute.For<IHebaoDianweiRepository>();
        private static ISetPrecisePriceItemService setPrecisePriceItemService = Substitute.For<ISetPrecisePriceItemService>();
        private static IYwxdetailRepository _ywxdetailRepository = Substitute.For<IYwxdetailRepository>();
        SetPrecisePriceItemService _setPrecisePriceItemService = new SetPrecisePriceItemService(_agentConfigRepository, _quoteResultRepository, _pictureRepository, _saveQuoteRepository, _submitInfoRepository, _hebaoDianweiRepository, _setPrecisePriceItem, _ywxdetailRepository);
        [Test]
        public void SetPrecisePriceItem_AllNull_QuoteStatusLessNegative1()
        {
            _setPrecisePriceItem.FindSource(Arg.Any<bx_userinfo>(), Arg.Any<GetMyBjdDetailRequest>()).Returns(x => new List<long> { 1, 4 });
            _submitInfoRepository.GetSubmitInfoList(Arg.Any<long>()).Returns(x => new List<bx_submit_info>());
            setPrecisePriceItemService.ConvertToViewModelNew(Arg.Any<int>(), Arg.Any<bx_savequote>(), Arg.Any<bx_quoteresult>(), Arg.Any<bx_submit_info>(), Arg.Any<int>(), Arg.Any<List<AgentConfigNameModel>>(), Arg.Any<string>(),Arg.Any<List<bx_ywxdetail>>(), Arg.Any<string>()).Returns(x => null);
            _pictureRepository.GetAllList(Arg.Any<Expression<Func<bx_picture, bool>>>()).Returns(x => null);
            _agentConfigRepository.FindListById(Arg.Any<string>()).Returns(x => null);
            _quoteResultRepository.GetQuoteResultList(Arg.Any<long>()).Returns(x => null);
            _hebaoDianweiRepository.FindList(Arg.Any<long>(), Arg.Any<long[]>()).Returns(x => null);
            _saveQuoteRepository.GetSavequoteByBuid(Arg.Any<long>()).Returns(x => null);
            var result = _setPrecisePriceItemService.SetPrecisePriceItem(new MyBaoJiaViewModel(), new bx_userinfo() { Id = 1, QuoteStatus = -1 }, new GetMyBjdDetailRequest() { Buid = 1 }, new List<bx_quoteresult_carinfo>(),1);
            Assert.AreEqual(null, result.PurchasePrice);
            Assert.AreEqual(0, result.PrecisePriceItem.Count);
            Assert.AreEqual(null, result.AutoMoldCode);
            Assert.AreEqual(null, result.BizStartDate);
            Assert.AreEqual(null, result.Buid);
            Assert.AreEqual(0, result.BusinessStatus);
            Assert.AreEqual(null, result.CarInfos);
            Assert.AreEqual(null, result.CarOwnerPerson);
            Assert.AreEqual(null, result.CarUsedType);
            Assert.AreEqual(null, result.CarVin);
            Assert.AreEqual(null, result.CityCode);
            Assert.AreEqual(0, result.ClaimCount);
            Assert.AreEqual(null, result.ClaimDetail);
            Assert.AreEqual(0, result.CoRealValue);
            Assert.AreEqual(null, result.CredentislasNum);
            Assert.AreEqual(null, result.CurAgent);
            Assert.AreEqual(null, result.CurAgentMobile);
            Assert.AreEqual(null, result.CurAgentName);
            Assert.AreEqual(null, result.CurOpenId);
            Assert.AreEqual(null, result.Email);
            Assert.AreEqual(null, result.EngineNo);
            Assert.AreEqual(null, result.ForceStartDate);
            Assert.AreEqual(0, result.HasBaojia);
            Assert.AreEqual(0, result.HasOrder);
            Assert.AreEqual(null, result.Holder);
            Assert.AreEqual(null, result.HolderPerson);
            Assert.AreEqual(null, result.IdCard);
            Assert.AreEqual(null, result.IdType);
            Assert.AreEqual(null, result.Images);
            Assert.AreEqual(0, result.Imgs.Count);
            Assert.AreEqual(null, result.InsuredAddress);
            Assert.AreEqual(null, result.InsuredIdCard);
            Assert.AreEqual(0, result.InsuredIdType);
            Assert.AreEqual(null, result.InsuredMobile);
            Assert.AreEqual(null, result.InsuredName);
            Assert.AreEqual(null, result.InsuredPerson);
            Assert.AreEqual(0, result.IsHolder);
            Assert.AreEqual(0, result.IsNewCar);
            Assert.AreEqual(0, result.IsPublic);
            Assert.AreEqual(0, result.IsShowCalc);
            Assert.AreEqual(0, result.IsTempInsured);
            Assert.AreEqual(0, result.IsTheDay);
            Assert.AreEqual(0, result.IsUploadImg.Count);
            Assert.AreEqual(null, result.LastBusinessEndDdate);
            Assert.AreEqual(null, result.LastEndDate);
            Assert.AreEqual(null, result.LicenseNo);
            Assert.AreEqual(null, result.LicenseOwner);
            Assert.AreEqual(null, result.MoldName);
            Assert.AreEqual(null, result.NewRate);
            Assert.AreEqual(0, result.OrderId);
            Assert.AreEqual(0, result.OrderStatus);
            Assert.AreEqual(null, result.PostedName);
            Assert.AreEqual(null, result.PostStartDate);
            Assert.AreEqual(0, result.PrecisePriceItem.Count);
            Assert.AreEqual(null, result.PurchasePrice);
            Assert.AreEqual(0, result.QuoteGroup);
            Assert.AreEqual(null, result.QuoteTime);
            Assert.AreEqual(null, result.RegisterDate);
            Assert.AreEqual(null, result.ReqInfo);
            Assert.AreEqual(null, result.SeatCount);
            Assert.AreEqual(null, result.SixDigitsAfterIdCard);
            Assert.AreEqual(null, result.StatusMessage);
            Assert.AreEqual(0, result.SubmitGroup);
            Assert.AreEqual(null, result.UpdateTime);
            Assert.AreEqual(null, result.UserName);
        }
        [Test]
        public void SetPrecisePriceItem_AllNotNull_QuoteStatusLessNegative1()
        {
            _setPrecisePriceItem.FindSource(Arg.Any<bx_userinfo>(), Arg.Any<GetMyBjdDetailRequest>()).Returns(x => new List<long> { 1, 4 });
            _submitInfoRepository.GetSubmitInfoList(Arg.Any<long>()).Returns(x => new List<bx_submit_info>());
            setPrecisePriceItemService.ConvertToViewModelNew(Arg.Any<int>(), Arg.Any<bx_savequote>(), Arg.Any<bx_quoteresult>(), Arg.Any<bx_submit_info>(), Arg.Any<int>(), Arg.Any<List<AgentConfigNameModel>>(), Arg.Any<string>(),Arg.Any<List<bx_ywxdetail>>(), Arg.Any<string>()).Returns(x => null);
            _pictureRepository.GetAllList(Arg.Any<Expression<Func<bx_picture, bool>>>()).Returns(x => new List<bx_picture>() { new bx_picture() { source = 1, id = 1 }, new bx_picture() { source = 4, id = 4 }, });
            _agentConfigRepository.FindListById(Arg.Any<string>()).Returns(x => new List<AgentConfigNameModel>());
            _quoteResultRepository.GetQuoteResultList(Arg.Any<long>()).Returns(x => new List<bx_quoteresult>());
            _hebaoDianweiRepository.FindList(Arg.Any<long>(), Arg.Any<long[]>()).Returns(x => new List<bx_hebaodianwei>());
            _saveQuoteRepository.GetSavequoteByBuid(Arg.Any<long>()).Returns(x => new bx_savequote());
            var result = _setPrecisePriceItemService.SetPrecisePriceItem(new MyBaoJiaViewModel(), new bx_userinfo() { Id = 1, QuoteStatus = -2 }, new GetMyBjdDetailRequest() { Buid = 1 }, new List<bx_quoteresult_carinfo>(),1);
            Assert.AreEqual(null, result.PurchasePrice);
            Assert.AreEqual(0, result.PrecisePriceItem.Count);
            Assert.AreEqual(null, result.AutoMoldCode);
            Assert.AreEqual(null, result.BizStartDate);
            Assert.AreEqual(null, result.Buid);
            Assert.AreEqual(0, result.BusinessStatus);
            Assert.AreEqual(null, result.CarInfos);
            Assert.AreEqual(null, result.CarOwnerPerson);
            Assert.AreEqual(null, result.CarUsedType);
            Assert.AreEqual(null, result.CarVin);
            Assert.AreEqual(null, result.CityCode);
            Assert.AreEqual(0, result.ClaimCount);
            Assert.AreEqual(null, result.ClaimDetail);
            Assert.AreEqual(0, result.CoRealValue);
            Assert.AreEqual(null, result.CredentislasNum);
            Assert.AreEqual(null, result.CurAgent);
            Assert.AreEqual(null, result.CurAgentMobile);
            Assert.AreEqual(null, result.CurAgentName);
            Assert.AreEqual(null, result.CurOpenId);
            Assert.AreEqual(null, result.Email);
            Assert.AreEqual(null, result.EngineNo);
            Assert.AreEqual(null, result.ForceStartDate);
            Assert.AreEqual(0, result.HasBaojia);
            Assert.AreEqual(0, result.HasOrder);
            Assert.AreEqual(null, result.Holder);
            Assert.AreEqual(null, result.HolderPerson);
            Assert.AreEqual(null, result.IdCard);
            Assert.AreEqual(null, result.IdType);
            Assert.AreEqual(null, result.Images);
            Assert.AreEqual(0, result.Imgs.Count);
            Assert.AreEqual(null, result.InsuredAddress);
            Assert.AreEqual(null, result.InsuredIdCard);
            Assert.AreEqual(0, result.InsuredIdType);
            Assert.AreEqual(null, result.InsuredMobile);
            Assert.AreEqual(null, result.InsuredName);
            Assert.AreEqual(null, result.InsuredPerson);
            Assert.AreEqual(0, result.IsHolder);
            Assert.AreEqual(0, result.IsNewCar);
            Assert.AreEqual(0, result.IsPublic);
            Assert.AreEqual(0, result.IsShowCalc);
            Assert.AreEqual(0, result.IsTempInsured);
            Assert.AreEqual(0, result.IsTheDay);
            Assert.AreEqual(0, result.IsUploadImg.Count);
            Assert.AreEqual(null, result.LastBusinessEndDdate);
            Assert.AreEqual(null, result.LastEndDate);
            Assert.AreEqual(null, result.LicenseNo);
            Assert.AreEqual(null, result.LicenseOwner);
            Assert.AreEqual(null, result.MoldName);
            Assert.AreEqual(null, result.NewRate);
            Assert.AreEqual(0, result.OrderId);
            Assert.AreEqual(0, result.OrderStatus);
            Assert.AreEqual(null, result.PostedName);
            Assert.AreEqual(null, result.PostStartDate);
            Assert.AreEqual(0, result.PrecisePriceItem.Count);
            Assert.AreEqual(null, result.PurchasePrice);
            Assert.AreEqual(0, result.QuoteGroup);
            Assert.AreEqual(null, result.QuoteTime);
            Assert.AreEqual(null, result.RegisterDate);
            Assert.AreEqual(null, result.ReqInfo);
            Assert.AreEqual(null, result.SeatCount);
            Assert.AreEqual(null, result.SixDigitsAfterIdCard);
            Assert.AreEqual(null, result.StatusMessage);
            Assert.AreEqual(0, result.SubmitGroup);
            Assert.AreEqual(null, result.UpdateTime);
            Assert.AreEqual(null, result.UserName);
        }
        [Test]
        public void SetPrecisePriceItem_AllNotNull_QuoteStatusGreaterNegative1()
        {
            _setPrecisePriceItem.FindSource(Arg.Any<bx_userinfo>(), Arg.Any<GetMyBjdDetailRequest>()).Returns(x => new List<long> { 1, 4 });
            _submitInfoRepository.GetSubmitInfoList(Arg.Any<long>()).Returns(x => new List<bx_submit_info>());
            setPrecisePriceItemService.ConvertToViewModelNew(Arg.Any<int>(), Arg.Any<bx_savequote>(), Arg.Any<bx_quoteresult>(), Arg.Any<bx_submit_info>(), Arg.Any<int>(), Arg.Any<List<AgentConfigNameModel>>(), Arg.Any<string>(),Arg.Any<List<bx_ywxdetail>>(), Arg.Any<string>()).Returns(x => null);
            _pictureRepository.GetAllList(Arg.Any<Expression<Func<bx_picture, bool>>>()).Returns(x => new List<bx_picture>() { new bx_picture() { source = 1, id = 1 }, new bx_picture() { source = 4, id = 4 }, });
            _agentConfigRepository.FindListById(Arg.Any<string>()).Returns(x => new List<AgentConfigNameModel>());
            _quoteResultRepository.GetQuoteResultList(Arg.Any<long>()).Returns(x => new List<bx_quoteresult>());
            _hebaoDianweiRepository.FindList(Arg.Any<long>(), Arg.Any<long[]>()).Returns(x => new List<bx_hebaodianwei>());
            _saveQuoteRepository.GetSavequoteByBuid(Arg.Any<long>()).Returns(x => new bx_savequote());
            var result = _setPrecisePriceItemService.SetPrecisePriceItem(new MyBaoJiaViewModel(), new bx_userinfo() { Id = 1, QuoteStatus = 1 }, new GetMyBjdDetailRequest() { Buid = 1 }, new List<bx_quoteresult_carinfo>(),1);
            Assert.AreEqual(null, result.PurchasePrice);
            Assert.AreEqual(2, result.PrecisePriceItem.Count);
            Assert.AreEqual(null, result.AutoMoldCode);
            Assert.AreEqual(null, result.BizStartDate);
            Assert.AreEqual(null, result.Buid);
            Assert.AreEqual(0, result.BusinessStatus);
            Assert.AreEqual(null, result.CarInfos);
            Assert.AreEqual(null, result.CarOwnerPerson);
            Assert.AreEqual(null, result.CarUsedType);
            Assert.AreEqual(null, result.CarVin);
            Assert.AreEqual(null, result.CityCode);
            Assert.AreEqual(0, result.ClaimCount);
            Assert.AreEqual(null, result.ClaimDetail);
            Assert.AreEqual(0, result.CoRealValue);
            Assert.AreEqual(null, result.CredentislasNum);
            Assert.AreEqual(null, result.CurAgent);
            Assert.AreEqual(null, result.CurAgentMobile);
            Assert.AreEqual(null, result.CurAgentName);
            Assert.AreEqual(null, result.CurOpenId);
            Assert.AreEqual(null, result.Email);
            Assert.AreEqual(null, result.EngineNo);
            Assert.AreEqual(null, result.ForceStartDate);
            Assert.AreEqual(0, result.HasBaojia);
            Assert.AreEqual(0, result.HasOrder);
            Assert.AreEqual(null, result.Holder);
            Assert.AreEqual(null, result.HolderPerson);
            Assert.AreEqual(null, result.IdCard);
            Assert.AreEqual(null, result.IdType);
            Assert.AreEqual(null, result.Images);
            Assert.AreEqual(0, result.Imgs.Count);
            Assert.AreEqual(null, result.InsuredAddress);
            Assert.AreEqual(null, result.InsuredIdCard);
            Assert.AreEqual(0, result.InsuredIdType);
            Assert.AreEqual(null, result.InsuredMobile);
            Assert.AreEqual(null, result.InsuredName);
            Assert.AreEqual(null, result.InsuredPerson);
            Assert.AreEqual(0, result.IsHolder);
            Assert.AreEqual(0, result.IsNewCar);
            Assert.AreEqual(0, result.IsPublic);
            Assert.AreEqual(0, result.IsShowCalc);
            Assert.AreEqual(0, result.IsTempInsured);
            Assert.AreEqual(0, result.IsTheDay);
            Assert.AreEqual(1, result.IsUploadImg.Count);
            Assert.AreEqual(1, result.IsUploadImg.FirstOrDefault().Source);
            Assert.AreEqual(1, result.IsUploadImg.FirstOrDefault().IsUpload);
            Assert.AreEqual(null, result.LastBusinessEndDdate);
            Assert.AreEqual(null, result.LastEndDate);
            Assert.AreEqual(null, result.LicenseNo);
            Assert.AreEqual(null, result.LicenseOwner);
            Assert.AreEqual(null, result.MoldName);
            Assert.AreEqual(null, result.NewRate);
            Assert.AreEqual(0, result.OrderId);
            Assert.AreEqual(0, result.OrderStatus);
            Assert.AreEqual(null, result.PostedName);
            Assert.AreEqual(null, result.PostStartDate);
            Assert.AreEqual(2, result.PrecisePriceItem.Count);
            Assert.AreEqual(null, result.PurchasePrice);
            Assert.AreEqual(0, result.QuoteGroup);
            Assert.AreEqual(null, result.QuoteTime);
            Assert.AreEqual(null, result.RegisterDate);
            Assert.AreEqual(null, result.ReqInfo);
            Assert.AreEqual(null, result.SeatCount);
            Assert.AreEqual(null, result.SixDigitsAfterIdCard);
            Assert.AreEqual(null, result.StatusMessage);
            Assert.AreEqual(0, result.SubmitGroup);
            Assert.AreEqual(null, result.UpdateTime);
            Assert.AreEqual(null, result.UserName);
        }
    }
}
